HY-463(IRS) assignment3, spring semester 2009, CSD UoC.
ΟΝΟΜΑΤΕΠΩΝΥΜΟ: Καστρινάκης Δημήτριος
Login: kastrin
AM: 1940

1) Έχουν υλοποιηθεί τα βήματα Π1 εως και Π11.

2) Το πρόγραμμα δίνει τη δυνατότητα στο χρήστη να φορτώσει γραφικά, να κατασκευάσει το inverted index του φακέλου documentCollection και να κάνει αναζήτηση με κάποιο από τα διαθέσιμα μοντέλα ανάκτησης πληροφορίας Boolean, Vector Space και Okapi_BM25. Δε δέχεται arguments για να τρέξει, εμφανίζει prompt στο χρήστη για να πληκτρολογήσει εντολή.

3) 

Χρόνος για δημιουργία Inverted Index της συλλογής documentCollection:
Περίπου 51sec.

Χρόνος για αναζήτηση boolean πρότασης: "text OR retrieval" στη συλλογή documentCollection βάσει Boolean Μοντέλου: Αμέσως.

Χρόνος για αναζήτηση: "text retrieval" στη συλλογή documentCollection βάσει Okapi_BM25 Μοντέλου: Περίπου 16" sec.

Χρόνος για αναζήτηση: "text retrieval" στη συλλογή documentCollection βάσει Vector Space Μοντέλου: Περίπου 1 ώρα και 43'.

CPU: Intel Core 2 Duo E6750 @ 2.66GHz
HDD: external 7200rpm USB2.0
RAM: 4.0GB
OS: Windows Vista Home Premium

4) Στο πέμπτο βήμα επέλεξα την προσέγγιση του ανεστραμμένου ευρετηρίου (Π5ii), όπου αυτό αποτελείται από 3 αρχεία, VocabularyFile.txt, PostingFile.txt και DocumentsFile.txt που βρίσκονται στο φάκελο CollectionIndex. Η μέθοδος Π5ii είναι πιο γρήγορη στην κατασκευή του ευρετηρίου από την πρώτη, διότι γράφει σε 3 μόνο αρχεία και όχι σε Ν όπου Ν = πλήθος λέξεων του Vocabulary (όπως κάνει η Π5i). Αυτό σημαίνει πως η μέθοδος Π5i απαιτεί εξαιρετικά μεγάλο I/O στην εκτέλεσή της, ενώ παράλληλα κατακερματίζει το σκληρό δίσκο, άν γίνονται αλλεπάλληλες διαγραφές και δημιουργίες ευρετηρίου.

5) Έγινε μια μικρή παρέκκλιση στη μέθοδο Π5ii:
Δεν ταξινομώ το PostingFile.txt, οπότε δεν μπορώ να δώσω έναν δείκτη σε κάθε όρο του VocabularyFile.txt, αλλά πολλούς. Δηλαδή αν ένας όρος εμφανίζεται σε 10 έγγραφα, θα έχει και 10 δείκτες καταχωρημένους στο αρχείο VocabularyFile.txt. Αυτό έγινε κυρίως για απλότητα αλλά και γιατί για να ταξινομήσουμε το PostingFile.txt, πρέπει να φορτωθεί ολόκληρο στην κύρια μνήμη. Κάτι τέτοιο όμως δεν είναι ρεαλιστικό, καθώς το PostingFile.txt συνήθως έχει τεράστιο μέγεθος. Επομένως αποφάσισα να κρατάω στη μνήμη πληροφορίες που αφορούν μόνο το τρέχον έγγραφο που αναλύεται. Ανοίγω και γράφω στο PostingFile.txt κάθε φορά που τελειώνει η ανάλυση κάποιου εγγράφου.

Επίσης έγινε και μια προσθήκη νέου αρχείου στο ανεστραμμένο ευρετήριο: Το αρχείο PostingPositionsOfDocsFile.txt καταγράφει δίπλα σε κάθε docID τον file pointer στο αρχείο PostingFile.txt όπου αρχίζει η καταγραφή των λέξεων για το τρέχον docID. Αυτό είναι απαραίτητο για να λειτουργήσει η ranking function του Okapi_BM25, συγκεκριμένα για να πάρουμε το πλήθος tokens κάποιου εγγράφου.